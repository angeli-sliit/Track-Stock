package auth;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;

public class UserService {

    // Retrieve user by email or username
    public User getUserByEmailOrUsername(String emailOrUsername) throws SQLException, ClassNotFoundException {
        String query = "SELECT * FROM registered_user WHERE username=? OR email=?";
        try (Connection con = DbConn.getConnection();
             PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, emailOrUsername);
            ps.setString(2, emailOrUsername);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return mapUserFromResultSet(rs); // Use a utility method for mapping
            }
        }
        return null;
    }

    // Admin check
    public User findAdminByEmailOrUsername(String emailOrUsername) throws SQLException, ClassNotFoundException {
        String query = "SELECT * FROM admin WHERE email=? OR name=?";
        try (Connection con = DbConn.getConnection();
             PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, emailOrUsername);
            ps.setString(2, emailOrUsername);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return mapUserFromResultSet(rs); // Reuse method to map result to User object
            }
        }
        return null;
    }

    // Method to check if the user is admin
    public boolean isAdmin(String email) throws SQLException, ClassNotFoundException {
        String query = "SELECT * FROM admin WHERE email=?";
        try (Connection con = DbConn.getConnection();
             PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();

            return rs.next(); // Check if the admin exists by email
        }
    }

    // Register new user
    public boolean registerUser(User user) throws SQLException, ClassNotFoundException {
        String query = "INSERT INTO registered_user (username, email, password, Access_level) VALUES (?, ?, ?, ?)";
        try (Connection con = DbConn.getConnection();
             PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, user.getUsername());
            ps.setString(2, user.getEmail());
            ps.setString(3, user.getPassword());
            ps.setString(4, user.getAccessLevel());

            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        }
    }

    // Generate OTP
    public String generateOTP() {
        Random random = new Random();
        StringBuilder otp = new StringBuilder();
        for (int i = 0; i < 6; i++) {
            otp.append(random.nextInt(10)); // Generate random digits
        }
        return otp.toString();
    }

    // Update password
    public boolean updatePassword(String email, String newPassword) throws SQLException, ClassNotFoundException {
        String query = "UPDATE registered_user SET password=? WHERE email=?";
        try (Connection con = DbConn.getConnection();
             PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, newPassword);
            ps.setString(2, email);

            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        }
    }

    // Update user access level
    public boolean updateUserAccess(User user) throws SQLException, ClassNotFoundException {
        String query = "UPDATE registered_user SET Access_level = ?, Access_state = ? WHERE email = ?";
        try (Connection con = DbConn.getConnection();
             PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, user.getAccessLevel());
            ps.setString(2, user.getActiveStatus());
            ps.setString(3, user.getEmail());

            int rowsUpdated = ps.executeUpdate();
            return rowsUpdated > 0;
        }
    }

    // Utility method for mapping a ResultSet to a User object
    private User mapUserFromResultSet(ResultSet rs) throws SQLException {
        String username = rs.getString("username");
        String email = rs.getString("email");
        String password = rs.getString("password");
        String accessStatus = rs.getString("Access_state");
        String accessLevel = rs.getString("Access_level");
        return new User(username, email, password, accessStatus, accessLevel);
    }
}
