/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-09-17 12:37:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.report;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import jakarta.servlet.http.HttpSession;
import auth.DbConn;

public final class salesreport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("jakarta.servlet.http.HttpSession");
    _jspx_imports_classes.add("auth.DbConn");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    HttpSession session1 = request.getSession(); 
    if(session1.getAttribute("login_state") == null){
        response.sendRedirect("../Login/Login.jsp");
        return;
    }

    String startDateStr = request.getParameter("start-date");
    String endDateStr = request.getParameter("end-date");

    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date startDate = null;
    Date endDate = null;

    if (startDateStr != null && !startDateStr.isEmpty() && endDateStr != null && !endDateStr.isEmpty()) {
        try {
            startDate = dateFormat.parse(startDateStr);
            endDate = dateFormat.parse(endDateStr);
        } catch (Exception e) {
            out.println("<p>Error parsing dates: " + e.getMessage() + "</p>");
        }
    }

    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String query = "SELECT s.AddedDate, p.prodName, p.Price, s.Quantity, s.TotalPrice " +
                   "FROM sales AS s INNER JOIN products AS p ON p.prodId = s.productId " +
                   "WHERE s.AddedDate BETWEEN ? AND ?";
    
    try {
        conn = DbConn.getConnection();
        stmt = conn.prepareStatement(query);
        if (startDate != null && endDate != null) {
            stmt.setDate(1, new java.sql.Date(startDate.getTime()));
            stmt.setDate(2, new java.sql.Date(endDate.getTime()));
            rs = stmt.executeQuery();
        } else {
            out.println("<p>Please provide both start and end dates.</p>");
        }
    } catch (Exception e) {
        out.println("<p>Error retrieving records: " + e.getMessage() + "</p>");
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Track-Stock - Sales By Date</title>\n");
      out.write("<link rel=\"icon\" type=\"image/x-icon\" href=\"../src/icon.png\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\">\n");
      out.write("<style>\n");
      out.write("    body {\n");
      out.write("        background-color: #f4f4f9;\n");
      out.write("        font-family: 'Arial', sans-serif;\n");
      out.write("    }\n");
      out.write("    .container {\n");
      out.write("        margin-top: 30px;\n");
      out.write("        background-color: #ffffff;\n");
      out.write("        padding: 20px;\n");
      out.write("        border-radius: 8px;\n");
      out.write("        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);\n");
      out.write("    }\n");
      out.write("    h1 {\n");
      out.write("        color: #007bff;\n");
      out.write("        font-weight: bold;\n");
      out.write("    }\n");
      out.write("    h4 {\n");
      out.write("        color: #6c757d;\n");
      out.write("    }\n");
      out.write("    .table-border {\n");
      out.write("        border-collapse: collapse;\n");
      out.write("        width: 100%;\n");
      out.write("        margin-top: 20px;\n");
      out.write("    }\n");
      out.write("    .table-border th, .table-border td {\n");
      out.write("        border: 1px solid #ddd;\n");
      out.write("        padding: 12px;\n");
      out.write("    }\n");
      out.write("    .table-border th {\n");
      out.write("        background-color: #007bff;\n");
      out.write("        color: #ffffff;\n");
      out.write("        text-align: center;\n");
      out.write("    }\n");
      out.write("    .table-border td {\n");
      out.write("        text-align: right;\n");
      out.write("    }\n");
      out.write("    .text-center {\n");
      out.write("        text-align: center;\n");
      out.write("    }\n");
      out.write("    .profit {\n");
      out.write("        color: #28a745;\n");
      out.write("        font-weight: bold;\n");
      out.write("    }\n");
      out.write("    .margin {\n");
      out.write("        color: #dc3545;\n");
      out.write("        font-weight: bold;\n");
      out.write("    }\n");
      out.write("    .overall {\n");
      out.write("        margin-top: 20px;\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"container\">\n");
      out.write("    <h1 class=\"text-center\">Sales Report - Sales By Dates</h1>\n");
      out.write("    <h4 class=\"text-center\">This is a computer-generated report, no signature required.</h4>\n");
      out.write("    <table class=\"table table-border\">\n");
      out.write("        <thead>\n");
      out.write("            <tr>\n");
      out.write("                <th>Date</th>\n");
      out.write("                <th>Product Title</th>\n");
      out.write("                <th>Buying Price (Rs.)</th>\n");
      out.write("                <th>Selling Price (Rs.)</th>\n");
      out.write("                <th>Sold Qty</th>\n");
      out.write("                <th>Total (Rs.)</th>\n");
      out.write("                <th>Profit (Rs.)</th>\n");
      out.write("                <th>Profit Margin</th>\n");
      out.write("            </tr>\n");
      out.write("        </thead>\n");
      out.write("        <tbody>\n");
      out.write("    ");
 
        double totalCost = 0.0;
        double totalRevenue = 0.0;
        double totalProfit = 0.0;
        double totalProfitMargin = 0.0;
          
        if (rs != null) {
            while (rs.next()) {
                double buyingPrice = rs.getDouble("Price");
                int quantity = rs.getInt("Quantity");
                double totalPrice = rs.getDouble("TotalPrice");
                double sellingPrice = totalPrice / quantity;
                double profit = (sellingPrice - buyingPrice) * quantity;
                double profitMargin = (profit / totalPrice) * 100;

                totalCost += buyingPrice * quantity;
                totalRevenue += totalPrice;
                totalProfit = totalRevenue - totalCost;
                totalProfitMargin = (totalProfit / totalRevenue) * 100;
        
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print( rs.getDate("AddedDate") );
      out.write("</td>\n");
      out.write("            <td style=\"text-align: left;\">");
      out.print( rs.getString("prodName") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( String.format("%.2f", buyingPrice) );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( String.format("%.2f", sellingPrice) );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( quantity );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( String.format("%.2f", totalPrice) );
      out.write("</td>\n");
      out.write("            <td class=\"profit\">");
      out.print( String.format("%.2f", profit) );
      out.write("</td>\n");
      out.write("            <td class=\"margin\">");
      out.print( String.format("%.2f", profitMargin) + "%" );
      out.write("</td>\n");
      out.write("        </tr>\n");
      out.write("        ");
 
            }
        }
    
      out.write("\n");
      out.write("    </tbody>\n");
      out.write("    </table>\n");
      out.write("\n");
      out.write("    ");
 if (rs != null) { 
      out.write("\n");
      out.write("        <div class=\"overall text-center\">\n");
      out.write("            <h3>Overall Profit: Rs. <span class=\"profit\">");
      out.print( String.format("%.2f", totalProfit) );
      out.write("</span></h3>\n");
      out.write("            <h3>Overall Profit Margin: <span class=\"margin\">");
      out.print( String.format("%.2f", totalProfitMargin) + "%" );
      out.write("</span></h3>\n");
      out.write("        </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");

    // Clean up
    if (rs != null) rs.close();
    if (stmt != null) stmt.close();
    if (conn != null) conn.close();

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
